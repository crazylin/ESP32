name: Build nanoFramework ESP32 Firmware

on:
  workflow_dispatch:
    inputs:
      target_board:
        description: 'Target ESP32 board'
        required: true
        default: 'ESP32_WROOM_32'
        type: choice
        options:
          - ESP32_WROOM_32
          - ESP32_WROVER_KIT
          - ESP32_PICO
          - ESP32_S2
          - ESP32_C3
      build_type:
        description: 'Build type'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug
      enable_debug:
        description: 'Enable debug symbols'
        required: false
        default: false
        type: boolean

env:
  ESP_IDF_VERSION: 'v4.4.6'
  CMAKE_VERSION: '3.21.0'
  NINJA_VERSION: '1.10.0'
  PYTHON_VERSION: '3.8'
  NF_REPOSITORY: 'nanoframework/nf-interpreter'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout nanoFramework repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.NF_REPOSITORY }}
          submodules: recursive
          fetch-depth: 0
          path: nf-interpreter

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache ESP-IDF tools
        uses: actions/cache@v3
        id: cache-esp-idf
        with:
          path: |
            C:\esp-idf
            C:\esp-idf-tools
          key: ${{ runner.os }}-esp-idf-${{ env.ESP_IDF_VERSION }}-${{ hashFiles('nf-interpreter/.github/workflows/config.yml') }}
          restore-keys: |
            ${{ runner.os }}-esp-idf-${{ env.ESP_IDF_VERSION }}-

      - name: Cache CMake
        uses: actions/cache@v3
        id: cache-cmake
        with:
          path: |
            C:\Program Files\CMake
            C:\CMake
          key: ${{ runner.os }}-cmake-${{ env.CMAKE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-cmake-

      - name: Cache Ninja
        uses: actions/cache@v3
        id: cache-ninja
        with:
          path: |
            C:\ninja
          key: ${{ runner.os }}-ninja-${{ env.NINJA_VERSION }}
          restore-keys: |
            ${{ runner.os }}-ninja-

      - name: Cache Python packages
        uses: actions/cache@v3
        id: cache-python
        with:
          path: |
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('nf-interpreter/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install ESP-IDF Tools
        if: steps.cache-esp-idf.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          Write-Host "Installing ESP-IDF tools..."
          
          # Download ESP-IDF installer
          $espIdfInstaller = "esp-idf-tools-setup.exe"
          Invoke-WebRequest -Uri "https://dl.espressif.com/dl/esp-idf/?idf=4.4" -OutFile $espIdfInstaller
          
          # Install ESP-IDF silently
          Start-Process -FilePath $espIdfInstaller -ArgumentList @(
            "/SP-", "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART",
            "/IDFDIR=C:\esp-idf",
            "/IDFVERSION=${{ env.ESP_IDF_VERSION }}"
          ) -Wait
          
          # Remove installer
          Remove-Item $espIdfInstaller -Force

      - name: Install CMake
        if: steps.cache-cmake.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          Write-Host "Installing CMake..."
          
          $cmakeInstaller = "cmake.msi"
          Invoke-WebRequest -Uri "https://github.com/Kitware/CMake/releases/download/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-windows-x86_64.msi" -OutFile $cmakeInstaller
          
          Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", $cmakeInstaller, "/quiet", "/norestart" -Wait
          Remove-Item $cmakeInstaller -Force

      - name: Install Ninja
        if: steps.cache-ninja.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          Write-Host "Installing Ninja..."
          
          $ninjaZip = "ninja.zip"
          Invoke-WebRequest -Uri "https://github.com/ninja-build/ninja/releases/download/v${{ env.NINJA_VERSION }}/ninja-win.zip" -OutFile $ninjaZip
          
          Expand-Archive -Path $ninjaZip -DestinationPath "C:\ninja" -Force
          Remove-Item $ninjaZip -Force

      - name: Install Python dependencies
        shell: powershell
        run: |
          cd nf-interpreter
          python -m pip install --upgrade pip
          pip install pyserial esptool pycryptodome --cache-dir ~\AppData\Local\pip\Cache

      - name: Setup environment variables
        shell: powershell
        run: |
          echo "C:\esp-idf\tools" >> $env:GITHUB_PATH
          echo "C:\esp-idf\tools\tools\xtensa-esp32-elf\esp-2021r2-patch5-8.4.0\xtensa-esp32-elf\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\CMake\bin" >> $env:GITHUB_PATH
          echo "C:\ninja" >> $env:GITHUB_PATH
          echo "IDF_PATH=C:\esp-idf" >> $env:GITHUB_ENV

      - name: Configure ESP-IDF environment
        shell: cmd
        run: |
          cd C:\esp-idf
          call install.bat esp32
          call export.bat

      - name: Create build directory
        shell: powershell
        run: |
          cd nf-interpreter
          mkdir build -Force
          cd build

      - name: Configure CMake build
        shell: powershell
        run: |
          cd nf-interpreter/build
          
          # Set build configuration based on inputs
          $buildType = "${{ github.event.inputs.build_type || 'Release' }}"
          $targetBoard = "${{ github.event.inputs.target_board || 'ESP32_WROOM_32' }}"
          $debugEnabled = "${{ github.event.inputs.enable_debug && 'ON' || 'OFF' }}"
          
          # Configure build with CMake
          cmake -G Ninja `
            -DTOOLCHAIN_PREFIX="C:/esp-idf/tools/tools/xtensa-esp32-elf" `
            -DESP32_IDF_PATH="C:/esp-idf" `
            -DTOOLCHAIN_BIN_DIR="C:/esp-idf/tools/tools/xtensa-esp32-elf/esp-2021r2-patch5-8.4.0/xtensa-esp32-elf/bin" `
            -DCMAKE_BUILD_TYPE=$buildType `
            -DTARGET_SERIES=ESP32 `
            -DTARGET_BOARD=$targetBoard `
            -DCMAKE_TOOLCHAIN_FILE="C:/esp-idf/tools/tools/xtensa-esp32-elf/esp-2021r2-patch5-8.4.0/xtensa-esp32-elf/share/cmake/toolchain.cmake" `
            -DAPI_System.Device.Gpio=ON `
            -DAPI_System.Device.Spi=ON `
            -DAPI_System.Device.I2c=ON `
            -DAPI_System.Device.Pwm=ON `
            -DAPI_System.Device.SerialCommunication=ON `
            -DAPI_Windows.Devices.Gpio=ON `
            -DAPI_Windows.Devices.Spi=ON `
            -DAPI_Windows.Devices.I2c=ON `
            -DAPI_Windows.Devices.Pwm=ON `
            -DAPI_Windows.Devices.SerialCommunication=ON `
            -DAPI_nanoFramework.ResourceManager=ON `
            -DAPI_nanoFramework.System.Collections=ON `
            -DAPI_nanoFramework.System.Text=ON `
            -DAPI_System.Net=ON `
            -DAPI_System.Device.Wifi=ON `
            -DAPI_System.Device.Adc=ON `
            -DAPI_System.Device.Dac=ON `
            -DAPI_Hardware.Esp32=ON `
            -DAPI_nanoFramework.Hardware.Esp32.Rmt=ON `
            -DAPI_nanoFramework.Networking.Sntp=ON `
            -DAPI_nanoFramework.System.IO.FileSystem=ON `
            -DAPI_nanoFramework.System.IO.Streams=ON `
            -DCMAKE_INCLUDE_DEBUG_INFO=$debugEnabled ..

      - name: Build nanoCLR
        shell: powershell
        run: |
          cd nf-interpreter/build
          cmake --build . --target nanoCLR

      - name: Build nanoBooter
        shell: powershell
        run: |
          cd nf-interpreter/build
          cmake --build . --target nanoBooter

      - name: Build bootloader and partitions
        shell: powershell
        run: |
          cd nf-interpreter/build
          cmake --build . --target bootloader
          cmake --build . --target partitions

      - name: Create firmware package
        shell: powershell
        run: |
          cd nf-interpreter/build
          
          $buildType = "${{ github.event.inputs.build_type || 'Release' }}"
          $targetBoard = "${{ github.event.inputs.target_board || 'ESP32_WROOM_32' }}"
          $firmwareDir = "nanoFramework-firmware-$targetBoard-$buildType"
          mkdir $firmwareDir -Force
          
          # Copy firmware files
          Copy-Item -Path "targets\FreeRTOS\ESP32\_IDF\*.bin" -Destination $firmwareDir -Recurse -ErrorAction SilentlyContinue
          Copy-Item -Path "targets\FreeRTOS\ESP32\_IDF\*.hex" -Destination $firmwareDir -Recurse -ErrorAction SilentlyContinue
          Copy-Item -Path "targets\FreeRTOS\ESP32\_IDF\*.elf" -Destination $firmwareDir -Recurse -ErrorAction SilentlyContinue
          
          # Create archive
          Compress-Archive -Path $firmwareDir -DestinationPath "$firmwareDir.zip" -Force

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nanoFramework-firmware-${{ github.event.inputs.target_board || 'ESP32_WROOM_32' }}-${{ github.event.inputs.build_type || 'Release' }}
          path: nf-interpreter/build/nanoFramework-firmware-*.zip
          retention-days: 30

      - name: Upload individual binaries
        uses: actions/upload-artifact@v3
        with:
          name: nanoFramework-binaries-${{ github.event.inputs.target_board || 'ESP32_WROOM_32' }}-${{ github.event.inputs.build_type || 'Release' }}
          path: |
            nf-interpreter/build/targets/FreeRTOS/ESP32/_IDF/*.bin
            nf-interpreter/build/targets/FreeRTOS/ESP32/_IDF/*.hex
            nf-interpreter/build/targets/FreeRTOS/ESP32/_IDF/*.elf
          retention-days: 30

      - name: Display build summary
        shell: powershell
        run: |
          Write-Host "=== Build Summary ==="
          Write-Host "Target Board: ${{ github.event.inputs.target_board || 'ESP32_WROOM_32' }}"
          Write-Host "Build Type: ${{ github.event.inputs.build_type || 'Release' }}"
          Write-Host "Debug Enabled: ${{ github.event.inputs.enable_debug }}"
          Write-Host "Build completed successfully!" `
            -DAPI_Windows.Devices.Gpio=ON `
            -DAPI_Windows.Devices.Spi=ON `
            -DAPI_Windows.Devices.I2c=ON `
            -DAPI_Windows.Devices.Pwm=ON `
            -DAPI_Windows.Devices.SerialCommunication=ON `
            -DAPI_nanoFramework.ResourceManager=ON `
            -DAPI_nanoFramework.System.Collections=ON `
            -DAPI_nanoFramework.System.Text=ON `
            -DAPI_System.Net=ON `
            -DAPI_System.Device.Wifi=ON `
            -DAPI_System.Device.Adc=ON `
            -DAPI_System.Device.Dac=ON `
            -DAPI_Hardware.Esp32=ON `
            -DAPI_nanoFramework.Hardware.Esp32.Rmt=ON `
            -DAPI_nanoFramework.Networking.Sntp=ON `
            -DAPI_nanoFramework.System.IO.FileSystem=ON `
            -DAPI_nanoFramework.System.IO.Streams=ON `
            -DCMAKE_INCLUDE_DEBUG_INFO=$debugEnabled `
            ..

      - name: Build nanoCLR
        shell: powershell
        run: |
          cd nf-interpreter/build
          cmake --build . --target nanoCLR --config ${{ matrix.build_type }}

      - name: Build nanoBooter
        shell: powershell
        run: |
          cd nf-interpreter/build
          cmake --build . --target nanoBooter --config ${{ matrix.build_type }}

      - name: Build bootloader and partitions
        shell: powershell
        run: |
          cd nf-interpreter/build
          cmake --build . --target bootloader --config ${{ matrix.build_type }}
          cmake --build . --target partitions --config ${{ matrix.build_type }}

      - name: Create firmware package
        shell: powershell
        run: |
          cd nf-interpreter/build
          
          $firmwareDir = "nanoFramework-firmware-${{ matrix.target_board }}-${{ matrix.build_type }}"
          mkdir $firmwareDir -Force
          
          # Copy firmware files
          Copy-Item -Path "targets\FreeRTOS\ESP32\_IDF\*.bin" -Destination $firmwareDir -Recurse -ErrorAction SilentlyContinue
          Copy-Item -Path "targets\FreeRTOS\ESP32\_IDF\*.hex" -Destination $firmwareDir -Recurse -ErrorAction SilentlyContinue
          Copy-Item -Path "targets\FreeRTOS\ESP32\_IDF\*.elf" -Destination $firmwareDir -Recurse -ErrorAction SilentlyContinue
          
          # Create archive
          Compress-Archive -Path $firmwareDir -DestinationPath "$firmwareDir.zip" -Force
          
          # List contents
          Get-ChildItem $firmwareDir -Recurse | ForEach-Object { Write-Host "Created: $($_.FullName)" }

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v3
        with:
          name: nanoFramework-firmware-${{ matrix.target_board }}-${{ matrix.build_type }}
          path: nf-interpreter/build/nanoFramework-firmware-${{ matrix.target_board }}-${{ matrix.build_type }}.zip
          retention-days: 30

      - name: Upload individual binaries
        uses: actions/upload-artifact@v3
        with:
          name: nanoFramework-binaries-${{ matrix.target_board }}-${{ matrix.build_type }}
          path: |
            nf-interpreter/build/targets/FreeRTOS/ESP32/_IDF/*.bin
            nf-interpreter/build/targets/FreeRTOS/ESP32/_IDF/*.hex
            nf-interpreter/build/targets/FreeRTOS/ESP32/_IDF/*.elf
          retention-days: 30

      - name: Display build summary
        shell: powershell
        run: |
          Write-Host "=== Build Summary ==="
          Write-Host "Target Board: ${{ matrix.target_board }}"
          Write-Host "Build Type: ${{ matrix.build_type }}"
          Write-Host "Debug Enabled: ${{ github.event.inputs.enable_debug }}"
          Write-Host "Build completed successfully!"