name: Build nanoFramework ESP32-S3 firmware

on:
  workflow_dispatch:
    inputs:
      configure_preset:
        description: 'CMake configure preset name in nf-interpreter (e.g. ESP32_S3_DEVKIT)'
        required: false
        default: 'ESP32_S3_DEVKIT'
      idf_version:
        description: 'ESP-IDF version tag (e.g. v5.2.1, v5.1.2, or latest)'
        required: false
        default: 'latest'
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: espressif/idf:latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show ESP-IDF environment
        shell: bash
        run: |
          set -eo pipefail
          . "${IDF_PATH}/export.sh"
          echo "IDF_PATH=$IDF_PATH"
          which cmake || true
          cmake --version
          which ninja || true
          ninja --version || true
          python3 --version
          idf.py --version || true

      - name: Clone nf-interpreter (with submodules)
        run: |
          git clone --depth 1 --recurse-submodules https://github.com/nanoframework/nf-interpreter.git
          git -C nf-interpreter submodule update --init --recursive

      - name: Ensure user tools repos preset exists
        shell: bash
        run: |
          set -euo pipefail
          preset_file="nf-interpreter/config/user-tools-repos.json"
          if [[ ! -f "$preset_file" ]]; then
            mkdir -p "$(dirname "$preset_file")"
            printf '%s\n' '{' \
              '  "version": 3,' \
              '  "vendor": {' \
              '    "nanoframework": {' \
              '      "userToolsRepos": []' \
              '    }' \
              '  }' \
              '}' > "$preset_file"
            echo "Created default $preset_file"
          else
            echo "$preset_file already exists"
          fi

      - name: List available CMake presets
        working-directory: nf-interpreter
        shell: bash
        run: |
          . "${IDF_PATH}/export.sh"
          cmake --list-presets

      - name: Configure (CMake preset)
        working-directory: nf-interpreter
        shell: bash
        run: |
          . "${IDF_PATH}/export.sh"
          cmake --preset "${{ github.event.inputs.configure_preset || 'ESP32_S3_DEVKIT' }}"

      - name: Build (Release)
        working-directory: nf-interpreter
        shell: bash
        run: |
          . "${IDF_PATH}/export.sh"
          cmake --build --preset "${{ github.event.inputs.configure_preset || 'ESP32_S3_DEVKIT' }}" --parallel

      - name: Collect firmware artifacts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p firmware
          build_dir=""
          if [[ -d nf-interpreter/build ]]; then
            build_dir="nf-interpreter/build"
          else
            cache_file=$(find nf-interpreter -maxdepth 3 -type f -name CMakeCache.txt | head -n 1 || true)
            if [[ -n "${cache_file}" ]]; then
              build_dir=$(dirname "${cache_file}")
            fi
          fi
          echo "Detected build directory: ${build_dir:-<none>}"
          # core outputs (best-effort)
          [[ -n "${build_dir}" ]] && cp -v "${build_dir}/nanoCLR.bin" firmware/ || true
          [[ -n "${build_dir}" ]] && cp -v "${build_dir}/bootloader/bootloader.bin" firmware/ || true
          # collect all other .bin files recursively, excluding duplicates
          if [[ -n "${build_dir}" ]]; then
            while IFS= read -r -d '' f; do
              base=$(basename "$f")
              if [[ "$base" != "nanoCLR.bin" && "$base" != "bootloader.bin" ]]; then
                cp -v "$f" firmware/
              fi
            done < <(find "${build_dir}" -type f -name "*.bin" -print0)
            # include full build folder for inspection
            tar -czf firmware/build-folder.tar.gz -C "${build_dir}" .
          fi

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: esp32s3-firmware
          path: firmware
          if-no-files-found: warn
          retention-days: 7


