name: Cache Cleanup

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (show what would be deleted)'
        required: false
        default: true
        type: boolean

jobs:
  cleanup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache Cleanup
      uses: actions/github-script@v6
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;

          console.log(`üîç Starting cleanup for ${owner}/${repo} caches...`);

          // Get all caches
          const caches = await github.rest.actions.getActionsCacheList({
            owner,
            repo,
            per_page: 100
          });

          console.log(`üìä Found ${caches.data.actions_caches.length} caches`);

          let deletedCount = 0;
          let totalSize = 0;

          for (const cache of caches.data.actions_caches) {
            const cacheAge = Date.now() - new Date(cache.created_at).getTime();
            const cacheAgeDays = Math.floor(cacheAge / (1000 * 60 * 60 * 24));

            console.log(`üì¶ Cache: ${cache.key}`);
            console.log(`   Size: ${(cache.size_in_bytes / 1024 / 1024).toFixed(2)} MB`);
            console.log(`   Created: ${cache.created_at}`);
            console.log(`   Age: ${cacheAgeDays} days`);

            // Delete caches older than 7 days
            if (cacheAgeDays > 7) {
              if (!core.getInput('dry_run') || core.getInput('dry_run') === 'true') {
                console.log(`   üóëÔ∏è  Will delete: ${cache.key}`);
              } else {
                await github.rest.actions.deleteActionsCacheByKey({
                  owner,
                  repo,
                  key: cache.key
                });
                console.log(`   ‚úÖ Deleted: ${cache.key}`);
              }
              deletedCount++;
              totalSize += cache.size_in_bytes;
            }
          }

          console.log(`\nüßπ Cleanup completed`);
          console.log(`   Deleted count: ${deletedCount}`);
          console.log(`   Space freed: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);

          if (core.getInput('dry_run') === 'true') {
            console.log(`\n‚ö†Ô∏è  This was a dry run, no caches were actually deleted`);
            console.log(`   Set dry_run=false to actually perform cleanup`);
          }

  cleanup-logs:
    runs-on: ubuntu-latest
    needs: cleanup
    
    steps:
    - name: Cleanup old workflow logs
      uses: actions/github-script@v6
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;

          // Get workflow runs
          const runs = await github.rest.actions.listWorkflowRunsForRepo({
            owner,
            repo,
            per_page: 100
          });

          console.log(`üìã Found ${runs.data.workflow_runs.length} workflow runs`);

          let deletedLogs = 0;

          for (const run of runs.data.workflow_runs) {
            const runAge = Date.now() - new Date(run.created_at).getTime();
            const runAgeDays = Math.floor(runAge / (1000 * 60 * 60 * 24));

            // Delete logs older than 30 days
            if (runAgeDays > 30) {
              try {
                await github.rest.actions.deleteWorkflowRunLogs({
                  owner,
                  repo,
                  run_id: run.id
                });
                console.log(`üóëÔ∏è  Deleted logs for workflow #${run.id}`);
                deletedLogs++;
              } catch (error) {
                console.log(`‚ö†Ô∏è  Could not delete logs for workflow #${run.id}: ${error.message}`);
              }
            }
          }

          console.log(`\nüßπ Log cleanup completed`);
          console.log(`   Deleted logs count: ${deletedLogs}`);